"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
import rules_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class RulesStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    PutNewDetectionRules: grpc.UnaryUnaryMultiCallable[
        rules_pb2.PutNewRulesRequest,
        rules_pb2.PutNewRulesReply,
    ]
    PutNewDetectionFilters: grpc.UnaryUnaryMultiCallable[
        rules_pb2.PutNewFiltersRequest,
        rules_pb2.PutNewFiltersReply,
    ]
    GetDetectionRules: grpc.UnaryUnaryMultiCallable[
        rules_pb2.GetRulesRequest,
        rules_pb2.GetRulesReply,
    ]

class RulesAsyncStub:
    PutNewDetectionRules: grpc.aio.UnaryUnaryMultiCallable[
        rules_pb2.PutNewRulesRequest,
        rules_pb2.PutNewRulesReply,
    ]
    PutNewDetectionFilters: grpc.aio.UnaryUnaryMultiCallable[
        rules_pb2.PutNewFiltersRequest,
        rules_pb2.PutNewFiltersReply,
    ]
    GetDetectionRules: grpc.aio.UnaryUnaryMultiCallable[
        rules_pb2.GetRulesRequest,
        rules_pb2.GetRulesReply,
    ]

class RulesServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def PutNewDetectionRules(
        self,
        request: rules_pb2.PutNewRulesRequest,
        context: _ServicerContext,
    ) -> typing.Union[rules_pb2.PutNewRulesReply, collections.abc.Awaitable[rules_pb2.PutNewRulesReply]]: ...
    @abc.abstractmethod
    def PutNewDetectionFilters(
        self,
        request: rules_pb2.PutNewFiltersRequest,
        context: _ServicerContext,
    ) -> typing.Union[rules_pb2.PutNewFiltersReply, collections.abc.Awaitable[rules_pb2.PutNewFiltersReply]]: ...
    @abc.abstractmethod
    def GetDetectionRules(
        self,
        request: rules_pb2.GetRulesRequest,
        context: _ServicerContext,
    ) -> typing.Union[rules_pb2.GetRulesReply, collections.abc.Awaitable[rules_pb2.GetRulesReply]]: ...

def add_RulesServicer_to_server(servicer: RulesServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
