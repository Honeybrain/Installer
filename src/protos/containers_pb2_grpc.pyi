"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import containers_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ContainersStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StreamContainers: grpc.UnaryStreamMultiCallable[
        containers_pb2.ContainersRequest,
        containers_pb2.ContainersReply,
    ]
    GetContainers: grpc.UnaryUnaryMultiCallable[
        containers_pb2.ContainersRequest,
        containers_pb2.ContainersReply,
    ]

class ContainersAsyncStub:
    StreamContainers: grpc.aio.UnaryStreamMultiCallable[
        containers_pb2.ContainersRequest,
        containers_pb2.ContainersReply,
    ]
    GetContainers: grpc.aio.UnaryUnaryMultiCallable[
        containers_pb2.ContainersRequest,
        containers_pb2.ContainersReply,
    ]

class ContainersServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def StreamContainers(
        self,
        request: containers_pb2.ContainersRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[containers_pb2.ContainersReply], collections.abc.AsyncIterator[containers_pb2.ContainersReply]]: ...
    @abc.abstractmethod
    def GetContainers(
        self,
        request: containers_pb2.ContainersRequest,
        context: _ServicerContext,
    ) -> typing.Union[containers_pb2.ContainersReply, collections.abc.Awaitable[containers_pb2.ContainersReply]]: ...

def add_ContainersServicer_to_server(servicer: ContainersServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
