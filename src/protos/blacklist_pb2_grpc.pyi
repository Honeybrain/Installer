"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import blacklist_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class BlacklistStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    PutBlackList: grpc.UnaryUnaryMultiCallable[
        blacklist_pb2.PutBlackListRequest,
        blacklist_pb2.PutBlackListReply,
    ]
    BlockCountry: grpc.UnaryUnaryMultiCallable[
        blacklist_pb2.BlockCountryRequest,
        blacklist_pb2.BlockCountryReply,
    ]
    GetBlackList: grpc.UnaryStreamMultiCallable[
        blacklist_pb2.GetBlackListRequest,
        blacklist_pb2.GetBlackListReply,
    ]
    GetBlackListUnary: grpc.UnaryUnaryMultiCallable[
        blacklist_pb2.GetBlackListRequest,
        blacklist_pb2.GetBlackListReply,
    ]
    PutWhiteList: grpc.UnaryUnaryMultiCallable[
        blacklist_pb2.PutWhiteListRequest,
        blacklist_pb2.PutWhiteListReply,
    ]

class BlacklistAsyncStub:
    PutBlackList: grpc.aio.UnaryUnaryMultiCallable[
        blacklist_pb2.PutBlackListRequest,
        blacklist_pb2.PutBlackListReply,
    ]
    BlockCountry: grpc.aio.UnaryUnaryMultiCallable[
        blacklist_pb2.BlockCountryRequest,
        blacklist_pb2.BlockCountryReply,
    ]
    GetBlackList: grpc.aio.UnaryStreamMultiCallable[
        blacklist_pb2.GetBlackListRequest,
        blacklist_pb2.GetBlackListReply,
    ]
    GetBlackListUnary: grpc.aio.UnaryUnaryMultiCallable[
        blacklist_pb2.GetBlackListRequest,
        blacklist_pb2.GetBlackListReply,
    ]
    PutWhiteList: grpc.aio.UnaryUnaryMultiCallable[
        blacklist_pb2.PutWhiteListRequest,
        blacklist_pb2.PutWhiteListReply,
    ]

class BlacklistServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def PutBlackList(
        self,
        request: blacklist_pb2.PutBlackListRequest,
        context: _ServicerContext,
    ) -> typing.Union[blacklist_pb2.PutBlackListReply, collections.abc.Awaitable[blacklist_pb2.PutBlackListReply]]: ...
    @abc.abstractmethod
    def BlockCountry(
        self,
        request: blacklist_pb2.BlockCountryRequest,
        context: _ServicerContext,
    ) -> typing.Union[blacklist_pb2.BlockCountryReply, collections.abc.Awaitable[blacklist_pb2.BlockCountryReply]]: ...
    @abc.abstractmethod
    def GetBlackList(
        self,
        request: blacklist_pb2.GetBlackListRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[blacklist_pb2.GetBlackListReply], collections.abc.AsyncIterator[blacklist_pb2.GetBlackListReply]]: ...
    @abc.abstractmethod
    def GetBlackListUnary(
        self,
        request: blacklist_pb2.GetBlackListRequest,
        context: _ServicerContext,
    ) -> typing.Union[blacklist_pb2.GetBlackListReply, collections.abc.Awaitable[blacklist_pb2.GetBlackListReply]]: ...
    @abc.abstractmethod
    def PutWhiteList(
        self,
        request: blacklist_pb2.PutWhiteListRequest,
        context: _ServicerContext,
    ) -> typing.Union[blacklist_pb2.PutWhiteListReply, collections.abc.Awaitable[blacklist_pb2.PutWhiteListReply]]: ...

def add_BlacklistServicer_to_server(servicer: BlacklistServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
