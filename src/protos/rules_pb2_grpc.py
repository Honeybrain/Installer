# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rules_pb2 as rules__pb2


class RulesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutNewDetectionRules = channel.unary_unary(
                '/rules.Rules/PutNewDetectionRules',
                request_serializer=rules__pb2.PutNewRulesRequest.SerializeToString,
                response_deserializer=rules__pb2.PutNewRulesReply.FromString,
                )
        self.PutNewDetectionFilters = channel.unary_unary(
                '/rules.Rules/PutNewDetectionFilters',
                request_serializer=rules__pb2.PutNewFiltersRequest.SerializeToString,
                response_deserializer=rules__pb2.PutNewFiltersReply.FromString,
                )
        self.GetDetectionRules = channel.unary_unary(
                '/rules.Rules/GetDetectionRules',
                request_serializer=rules__pb2.GetRulesRequest.SerializeToString,
                response_deserializer=rules__pb2.GetRulesReply.FromString,
                )


class RulesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PutNewDetectionRules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutNewDetectionFilters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDetectionRules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RulesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutNewDetectionRules': grpc.unary_unary_rpc_method_handler(
                    servicer.PutNewDetectionRules,
                    request_deserializer=rules__pb2.PutNewRulesRequest.FromString,
                    response_serializer=rules__pb2.PutNewRulesReply.SerializeToString,
            ),
            'PutNewDetectionFilters': grpc.unary_unary_rpc_method_handler(
                    servicer.PutNewDetectionFilters,
                    request_deserializer=rules__pb2.PutNewFiltersRequest.FromString,
                    response_serializer=rules__pb2.PutNewFiltersReply.SerializeToString,
            ),
            'GetDetectionRules': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDetectionRules,
                    request_deserializer=rules__pb2.GetRulesRequest.FromString,
                    response_serializer=rules__pb2.GetRulesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rules.Rules', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rules(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PutNewDetectionRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rules.Rules/PutNewDetectionRules',
            rules__pb2.PutNewRulesRequest.SerializeToString,
            rules__pb2.PutNewRulesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutNewDetectionFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rules.Rules/PutNewDetectionFilters',
            rules__pb2.PutNewFiltersRequest.SerializeToString,
            rules__pb2.PutNewFiltersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDetectionRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rules.Rules/GetDetectionRules',
            rules__pb2.GetRulesRequest.SerializeToString,
            rules__pb2.GetRulesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
